{"version":3,"sources":["logo.png","github.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","start","colorful","qprogressColorful","qprogress","set","inc","finish","switchToColor","this","QProgress","className","src","logo","alt","onClick","ref","controlRef","href","github","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,uPC0H5BC,E,YAnHb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAqBRC,MAAQ,WACN,EAAKC,SAAW,EAAKC,kBAAkBF,QAAU,EAAKG,UAAUH,SAvB/C,EA0BnBI,IAAM,WACJ,EAAKH,SAAW,EAAKC,kBAAkBE,IAAI,IAAO,EAAKD,UAAUC,IAAI,KA3BpD,EA8BnBC,IAAM,WACJ,EAAKJ,SAAW,EAAKC,kBAAkBG,IAAI,IAAO,EAAKF,UAAUE,IAAI,KA/BpD,EAkCnBC,OAAS,WACP,EAAKL,SAAW,EAAKC,kBAAkBI,SAAW,EAAKH,UAAUG,UAnChD,EAsCnBC,cAAgB,WACV,EAAKN,UACP,EAAKC,kBAAkBI,SACvB,EAAKH,UAAUH,UAEf,EAAKG,UAAUG,SACf,EAAKJ,kBAAkBF,SAGzB,EAAKC,UAAY,EAAKA,UA7CtB,EAAKA,UAAW,EAEhB,EAAKC,kBAAoB,KACzB,EAAKC,UAAY,KALA,E,iFASjBK,KAAKN,kBAAoB,IAAIO,IAAU,CACrCR,UAAU,IAEZO,KAAKL,UAAY,IAAIM,IAAU,CAC7BR,UAAU,M,6CAKZO,KAAKN,kBAAoB,KACzBM,KAAKL,UAAY,O,+BAgCjB,OACE,yBAAKO,UAAU,OACb,yBAAKA,UAAU,WAGf,yBAAKA,UAAU,QACb,yBAAKC,IAAKC,IAAMC,IAAI,OAAOC,QAASN,KAAKD,gBACzC,uBAAGG,UAAU,QAAb,qCAEF,uBAAGA,UAAU,QAAb,iBAGA,yBAAKA,UAAU,YAAW,+IAC1B,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,UAAUK,IAAKP,KAAKQ,YACjC,yBAAKN,UAAU,UAAf,qCAGA,uBAAGA,UAAU,WACX,4BAAQA,UAAU,SAASI,QAASN,KAAKR,QACzC,wCACA,uCAHF,yCAOA,2BACE,4BAAQU,UAAU,SAASI,QAASN,KAAKJ,MACzC,wCACA,wCAHF,oCAOA,2BACE,4BAAQM,UAAU,SAASI,QAASN,KAAKH,MACzC,wCACA,wCAHF,yCAOA,2BACE,4BAAQK,UAAU,SAASI,QAASN,KAAKF,SACzC,wCACA,wCAHF,2CASJ,uBAAGI,UAAU,WAAb,oEACA,yBAAKA,UAAU,UACb,uBAAGO,KAAK,+CACN,yBAAKP,UAAU,cACb,yBAAKC,IAAKO,IAAQL,IAAI,WACtB,wCAIN,yBAAKH,UAAU,WACf,yBAAKA,UAAU,UAAf,+BAA0C,uBAAGS,OAAO,SAASF,KAAK,+CAAxB,iBAA1C,gCAA8J,uBAAGA,KAAK,yCAAyCE,OAAO,UAAxD,aAA9J,0D,GA9GUC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f1e0822c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.894a268d.png\";","module.exports = __webpack_public_path__ + \"static/media/github.af6eddc6.svg\";","import React, { Component } from 'react';\nimport logo from './logo.png';\nimport github from './github.svg';\nimport './App.css';\nimport QProgress from 'qier-progress';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.colorful = true\n\n    this.qprogressColorful = null\n    this.qprogress = null\n  }\n\n  componentDidMount() {\n    this.qprogressColorful = new QProgress({\n      colorful: true,\n    })\n    this.qprogress = new QProgress({\n      colorful: false\n    })\n  }\n\n  componentWillUnmount() {\n    this.qprogressColorful = null\n    this.qprogress = null\n  }\n\n  start = () => {\n    this.colorful ? this.qprogressColorful.start() : this.qprogress.start()\n  }\n\n  set = () => {\n    this.colorful ? this.qprogressColorful.set(0.4) : this.qprogress.set(0.4)\n  }\n\n  inc = () => {\n    this.colorful ? this.qprogressColorful.inc(0.1) : this.qprogress.inc(0.1)\n  }\n\n  finish = () => {\n    this.colorful ? this.qprogressColorful.finish() : this.qprogress.finish()\n  }\n\n  switchToColor = () => {\n    if (this.colorful) {\n      this.qprogressColorful.finish()\n      this.qprogress.start()\n    } else {\n      this.qprogress.finish()\n      this.qprogressColorful.start()\n    }\n    \n    this.colorful = !this.colorful\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n\n        </div>\n        <div className=\"logo\">\n          <img src={logo} alt=\"logo\" onClick={this.switchToColor}/>\n          <p className=\"tips\">Click me switch to colorful mode</p>\n        </div>\n        <p className=\"name\">\n          qier-progress\n        </p>\n        <div className=\"describe\"><p>A slim and color progress bar. With realistic trickle animations to tell your users that something's happening!</p></div>\n        <div className=\"control-wrap\">\n          <div className=\"control\" ref={this.controlRef}>\n            <div className=\"create\">\n              const qprogress = new QProgress()\n            </div>\n            <p className=\"first-p\">\n              <button className=\"button\" onClick={this.start}></button>\n              <i>qprogress</i>\n              <b>.start()</b>\n              &nbsp;\n              â€”&nbsp;shows the progress bar\n            </p>\n            <p>\n              <button className=\"button\" onClick={this.set}></button>\n              <i>qprogress</i>\n              <b>.set(0.4)</b>\n              &nbsp;\n              â€”&nbsp;sets a percentage\n            </p>\n            <p>\n              <button className=\"button\" onClick={this.inc}></button>\n              <i>qprogress</i>\n              <b>.inc(0.1)</b>\n              &nbsp;\n              â€”&nbsp;increments by a little\n            </p>\n            <p>\n              <button className=\"button\" onClick={this.finish}></button>\n              <i>qprogress</i>\n              <b>.finish()</b>\n              &nbsp;\n              â€”&nbsp;completes the progress\n            </p>\n          </div>\n        </div>\n        <p className=\"endword\">Perfect for ajax request, file or iframe load, and other scenes.</p>\n        <div className=\"github\">\n          <a href=\"https://github.com/vortesnail/qier-progress\">\n            <div className=\"github-btn\">\n              <img src={github} alt=\"github\"/>\n              <p>GitHub</p>\n            </div>\n          </a>\n        </div>\n        <div className=\"shadow\"></div>\n        <div className=\"thanks\">ðŸŒ¸As you can see, <a target=\"_blank\" href=\"https://github.com/vortesnail/qier-progress\">qier-progress</a> uses typescript to refactor <a href=\"https://github.com/rstacruz/nprogress/\" target=\"_blank\">nprogress</a>, more features, and has better type annotations.</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}